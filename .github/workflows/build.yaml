name: "Package ATS"
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  lint_python_code:
    name: lint_python_code
    runs-on: ubuntu-latest
    container:
      image: python:3.11-slim-bookworm
    steps:
      - name: checkout_repo
        uses: actions/checkout@v4
      - name: install_poetry
        run: | # Install poetry and check it works
          pip install poetry
          poetry --version
      - name: install_python_dependencies
        run: | # Install the dependencies but update the dev dependencies because they are linters and type hints
          poetry config virtualenvs.in-project true
          poetry update --only=dev
          poetry install
      - name: lint_python_bandit
        run: | # Linter for security issues like secrets and pseudo random numbers in the code.
          poetry run bandit -c pyproject.toml -r .
      - name: lint_python_black
        run: | # General code linter
          poetry run black ./src/ --check --diff
      - name: lint_python_flake
        run: | # General code linter
          poetry run flake8 ./src/
      - name: lint_python_mypy
        run: | # MYPY cant handle my pkgutil-style structure. It "thinks" that my root namespace is called src
          poetry run mypy -p src
      - name: lint_python_pylint
        run: | # General code linter
          poetry run pylint ./src/ --recursive=y
      - name: lint_python_pyright
        run: | # General code linter focus on types
          poetry run pyright ./src/
      - name: lint_python_ruff
        run: | # General code linter
          poetry run ruff check --config pyproject.toml ./src/
      - name: lint_documentation_pydocstyle
        run: | # Docstring linter
          poetry run pydocstyle ./src/
      - name: lint_python_isort
        run: | # Import sorting linter
          poetry run isort ./src/ --check --dif

  lint_container_file:
    name: lint_container_build_file
    runs-on: ubuntu-latest
    steps:
      - name: checkout_repo
        uses: actions/checkout@v4
      - name: lint_docker
        uses: hadolint/hadolint-action@v3.1.0
        with: # Lint the docker file for style and security issues
          dockerfile: ./docker/Dockerfile

  build_python_package:
    name: build_python_package
    runs-on: ubuntu-latest
    container:
      image: python:3.11-slim-bookworm
    needs: [lint_python_code, lint_container_file]
    steps:
      - name: checkout_repo
        uses: actions/checkout@v4
      - name: install_and_configure_poetry
        run: | # Install poetry and check it works
          pip install poetry
          poetry --version
      - name: install_and_configure_poetry
        run: | # Configure Poetry and install the package dependencies
          poetry config virtualenvs.in-project true
          poetry install
      - name: publish_package
        env:
          PYPI_URL: ${{ vars.PYPI_URL}}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: | # Build the package with sub packages
          export POETRY_APP_VERSION=$(poetry version --short)
          poetry version $POETRY_APP_VERSION
          poetry config repositories.pypi-repo $PYPI_URL
          poetry config pypi-token.pypi-repo $PYPI_TOKEN
          poetry publish --build
  build_container_image:
    name: build_container_image
    needs: [build_python_package]
    runs-on: ubuntu-latest
    container:
      image: python:3.11-slim-bookworm
    steps:
      - name: build_image
        run:
          echo build container image!